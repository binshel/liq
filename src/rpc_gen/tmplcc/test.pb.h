// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class A;
class SearchRequest;
class SearchResponse;

// ===================================================================

class A : public ::google::protobuf::Message {
 public:
  A();
  virtual ~A();

  A(const A& from);

  inline A& operator=(const A& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const A& default_instance();

  void Swap(A* other);

  // implements Message ----------------------------------------------

  A* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const A& from);
  void MergeFrom(const A& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:test.A)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static A* default_instance_;
};
// -------------------------------------------------------------------

class SearchRequest : public ::google::protobuf::Message {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  void Swap(SearchRequest* other);

  // implements Message ----------------------------------------------

  SearchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .test.A a = 2;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 2;
  inline const ::test::A& a() const;
  inline ::test::A* mutable_a();
  inline ::test::A* release_a();
  inline void set_allocated_a(::test::A* a);

  // required int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated int32 nums = 4;
  inline int nums_size() const;
  inline void clear_nums();
  static const int kNumsFieldNumber = 4;
  inline ::google::protobuf::int32 nums(int index) const;
  inline void set_nums(int index, ::google::protobuf::int32 value);
  inline void add_nums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nums();

  // repeated string strs = 5;
  inline int strs_size() const;
  inline void clear_strs();
  static const int kStrsFieldNumber = 5;
  inline const ::std::string& strs(int index) const;
  inline ::std::string* mutable_strs(int index);
  inline void set_strs(int index, const ::std::string& value);
  inline void set_strs(int index, const char* value);
  inline void set_strs(int index, const char* value, size_t size);
  inline ::std::string* add_strs();
  inline void add_strs(const ::std::string& value);
  inline void add_strs(const char* value);
  inline void add_strs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strs();

  // @@protoc_insertion_point(class_scope:test.SearchRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::test::A* a_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nums_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strs_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static SearchRequest* default_instance_;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message {
 public:
  SearchResponse();
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();

  void Swap(SearchResponse* other);

  // implements Message ----------------------------------------------

  SearchResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string reply = 1;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 1;
  inline const ::std::string& reply() const;
  inline void set_reply(const ::std::string& value);
  inline void set_reply(const char* value);
  inline void set_reply(const char* value, size_t size);
  inline ::std::string* mutable_reply();
  inline ::std::string* release_reply();
  inline void set_allocated_reply(::std::string* reply);

  // required .test.A a = 2;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 2;
  inline const ::test::A& a() const;
  inline ::test::A* mutable_a();
  inline ::test::A* release_a();
  inline void set_allocated_a(::test::A* a);

  // required int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated int32 nums = 4;
  inline int nums_size() const;
  inline void clear_nums();
  static const int kNumsFieldNumber = 4;
  inline ::google::protobuf::int32 nums(int index) const;
  inline void set_nums(int index, ::google::protobuf::int32 value);
  inline void add_nums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nums();

  // repeated string strs = 5;
  inline int strs_size() const;
  inline void clear_strs();
  static const int kStrsFieldNumber = 5;
  inline const ::std::string& strs(int index) const;
  inline ::std::string* mutable_strs(int index);
  inline void set_strs(int index, const ::std::string& value);
  inline void set_strs(int index, const char* value);
  inline void set_strs(int index, const char* value, size_t size);
  inline ::std::string* add_strs();
  inline void add_strs(const ::std::string& value);
  inline void add_strs(const char* value);
  inline void add_strs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strs();

  // @@protoc_insertion_point(class_scope:test.SearchResponse)
 private:
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* reply_;
  ::test::A* a_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nums_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strs_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static SearchResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// A

// -------------------------------------------------------------------

// SearchRequest

// required string name = 1;
inline bool SearchRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SearchRequest::name() const {
  return *name_;
}
inline void SearchRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SearchRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SearchRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SearchRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .test.A a = 2;
inline bool SearchRequest::has_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchRequest::set_has_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchRequest::clear_has_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchRequest::clear_a() {
  if (a_ != NULL) a_->::test::A::Clear();
  clear_has_a();
}
inline const ::test::A& SearchRequest::a() const {
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::test::A* SearchRequest::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::test::A;
  return a_;
}
inline ::test::A* SearchRequest::release_a() {
  clear_has_a();
  ::test::A* temp = a_;
  a_ = NULL;
  return temp;
}
inline void SearchRequest::set_allocated_a(::test::A* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
}

// required int32 num = 3;
inline bool SearchRequest::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchRequest::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchRequest::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchRequest::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SearchRequest::num() const {
  return num_;
}
inline void SearchRequest::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// repeated int32 nums = 4;
inline int SearchRequest::nums_size() const {
  return nums_.size();
}
inline void SearchRequest::clear_nums() {
  nums_.Clear();
}
inline ::google::protobuf::int32 SearchRequest::nums(int index) const {
  return nums_.Get(index);
}
inline void SearchRequest::set_nums(int index, ::google::protobuf::int32 value) {
  nums_.Set(index, value);
}
inline void SearchRequest::add_nums(::google::protobuf::int32 value) {
  nums_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SearchRequest::nums() const {
  return nums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SearchRequest::mutable_nums() {
  return &nums_;
}

// repeated string strs = 5;
inline int SearchRequest::strs_size() const {
  return strs_.size();
}
inline void SearchRequest::clear_strs() {
  strs_.Clear();
}
inline const ::std::string& SearchRequest::strs(int index) const {
  return strs_.Get(index);
}
inline ::std::string* SearchRequest::mutable_strs(int index) {
  return strs_.Mutable(index);
}
inline void SearchRequest::set_strs(int index, const ::std::string& value) {
  strs_.Mutable(index)->assign(value);
}
inline void SearchRequest::set_strs(int index, const char* value) {
  strs_.Mutable(index)->assign(value);
}
inline void SearchRequest::set_strs(int index, const char* value, size_t size) {
  strs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchRequest::add_strs() {
  return strs_.Add();
}
inline void SearchRequest::add_strs(const ::std::string& value) {
  strs_.Add()->assign(value);
}
inline void SearchRequest::add_strs(const char* value) {
  strs_.Add()->assign(value);
}
inline void SearchRequest::add_strs(const char* value, size_t size) {
  strs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchRequest::strs() const {
  return strs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchRequest::mutable_strs() {
  return &strs_;
}

// -------------------------------------------------------------------

// SearchResponse

// required string reply = 1;
inline bool SearchResponse::has_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchResponse::set_has_reply() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchResponse::clear_has_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchResponse::clear_reply() {
  if (reply_ != &::google::protobuf::internal::kEmptyString) {
    reply_->clear();
  }
  clear_has_reply();
}
inline const ::std::string& SearchResponse::reply() const {
  return *reply_;
}
inline void SearchResponse::set_reply(const ::std::string& value) {
  set_has_reply();
  if (reply_ == &::google::protobuf::internal::kEmptyString) {
    reply_ = new ::std::string;
  }
  reply_->assign(value);
}
inline void SearchResponse::set_reply(const char* value) {
  set_has_reply();
  if (reply_ == &::google::protobuf::internal::kEmptyString) {
    reply_ = new ::std::string;
  }
  reply_->assign(value);
}
inline void SearchResponse::set_reply(const char* value, size_t size) {
  set_has_reply();
  if (reply_ == &::google::protobuf::internal::kEmptyString) {
    reply_ = new ::std::string;
  }
  reply_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResponse::mutable_reply() {
  set_has_reply();
  if (reply_ == &::google::protobuf::internal::kEmptyString) {
    reply_ = new ::std::string;
  }
  return reply_;
}
inline ::std::string* SearchResponse::release_reply() {
  clear_has_reply();
  if (reply_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reply_;
    reply_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SearchResponse::set_allocated_reply(::std::string* reply) {
  if (reply_ != &::google::protobuf::internal::kEmptyString) {
    delete reply_;
  }
  if (reply) {
    set_has_reply();
    reply_ = reply;
  } else {
    clear_has_reply();
    reply_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .test.A a = 2;
inline bool SearchResponse::has_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchResponse::set_has_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchResponse::clear_has_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchResponse::clear_a() {
  if (a_ != NULL) a_->::test::A::Clear();
  clear_has_a();
}
inline const ::test::A& SearchResponse::a() const {
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::test::A* SearchResponse::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::test::A;
  return a_;
}
inline ::test::A* SearchResponse::release_a() {
  clear_has_a();
  ::test::A* temp = a_;
  a_ = NULL;
  return temp;
}
inline void SearchResponse::set_allocated_a(::test::A* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
}

// required int32 num = 3;
inline bool SearchResponse::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchResponse::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchResponse::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchResponse::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SearchResponse::num() const {
  return num_;
}
inline void SearchResponse::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// repeated int32 nums = 4;
inline int SearchResponse::nums_size() const {
  return nums_.size();
}
inline void SearchResponse::clear_nums() {
  nums_.Clear();
}
inline ::google::protobuf::int32 SearchResponse::nums(int index) const {
  return nums_.Get(index);
}
inline void SearchResponse::set_nums(int index, ::google::protobuf::int32 value) {
  nums_.Set(index, value);
}
inline void SearchResponse::add_nums(::google::protobuf::int32 value) {
  nums_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SearchResponse::nums() const {
  return nums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SearchResponse::mutable_nums() {
  return &nums_;
}

// repeated string strs = 5;
inline int SearchResponse::strs_size() const {
  return strs_.size();
}
inline void SearchResponse::clear_strs() {
  strs_.Clear();
}
inline const ::std::string& SearchResponse::strs(int index) const {
  return strs_.Get(index);
}
inline ::std::string* SearchResponse::mutable_strs(int index) {
  return strs_.Mutable(index);
}
inline void SearchResponse::set_strs(int index, const ::std::string& value) {
  strs_.Mutable(index)->assign(value);
}
inline void SearchResponse::set_strs(int index, const char* value) {
  strs_.Mutable(index)->assign(value);
}
inline void SearchResponse::set_strs(int index, const char* value, size_t size) {
  strs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResponse::add_strs() {
  return strs_.Add();
}
inline void SearchResponse::add_strs(const ::std::string& value) {
  strs_.Add()->assign(value);
}
inline void SearchResponse::add_strs(const char* value) {
  strs_.Add()->assign(value);
}
inline void SearchResponse::add_strs(const char* value, size_t size) {
  strs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchResponse::strs() const {
  return strs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SearchResponse::mutable_strs() {
  return &strs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
